'use strict';

exports.__esModule = true;
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AccordionNode = function (_PureComponent) {
  _inherits(AccordionNode, _PureComponent);

  function AccordionNode() {
    _classCallCheck(this, AccordionNode);

    return _possibleConstructorReturn(this, _PureComponent.apply(this, arguments));
  }

  AccordionNode.prototype.render = function render() {
    var _props = this.props,
        indexKey = _props.indexKey,
        className = _props.className,
        style = _props.style,
        children = _props.children,
        isExpanded = _props.isExpanded,
        onClickHeader = _props.onClickHeader;


    if (!children) {
      console.warn('AccordionNode component has no inner items!');
      return null;
    }
    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)(className), style: _extends({}, style) },
      _react.Children.map(children, function (item) {
        return (
          // lets render the <AccordionHeader /> and <AccordionPanel />
          (0, _react.cloneElement)(item, _extends({
            indexKey: indexKey,
            isExpanded: isExpanded,
            onClickHeader: onClickHeader
          }, item.props))
        );
      })
    );
  };

  return AccordionNode;
}(_react.PureComponent);

exports.default = AccordionNode;


AccordionNode.propTypes = process.env.NODE_ENV !== "production" ? {
  children: _propTypes2.default.node.isRequired,
  isExpanded: _propTypes2.default.bool,
  onClickHeader: _propTypes2.default.func,
  className: _propTypes2.default.string,
  style: _propTypes2.default.object
} : {};
module.exports = exports['default'];